classdef WindPlant < handle
    %WindPlant Class representation of a collection of wind turbines
    %   Takes wind speed data and an area as input arguments
    %   From that, the constructor determines the number of Enercon E-126
    %   wind turbines that can fit in that area. With the number of win
    %   turbines, the power generated can be determined.
    
    properties
        pwr; %Power generated by the plant for given area and wind speed
        num_wturb; %Number of wind turbines
        wind_spd; %Wind speed
        total_area; %Area
    end
    
    properties(Constant)
        wturb_size = 12668; %Size of each turbine in square meters
        %Percentage of energy produced at certain time intervals
        tmod = [0.10, 0.20, 0.35, 0.30, 0.05]; 
    end
    
    methods
        %Constructor for WindPlant; Accepts a wind speed and area as input
        function obj = WindPlant(wind,a)
            obj.wind_spd = wind;
            %Calculates the number of turbines and stores in num_wturb
            obj.num_wturb = floor(a/obj.wturb_size);
            %Calculates the power produced and stores in pwr
            obj.pwr = calc_wind(wind) * obj.num_wturb;
            obj.total_area = obj.num_wturb * obj.wturb_size;
        end
        
        %Returns the power output of the power plant
        function out = get_pwr(obj)
            out = obj.pwr;
        end
        
        %Returns the number of wind turbines in a plant
        function out = get_num_wturb(obj)
            out = obj.num_wturb;
        end
        
        %Sets the number of wind turbines in a plant and updates power
        %output
        function obj = set_wturb(obj,n)
            obj.num_wturb = n;
            obj.pwr = calc_wind(obj.wind_spd) * n;
        end
        
        %Sets the wind speed
        function obj = set_wind(obj,n)
            obj.wind_spd = n;
            obj.pwr = calc_wind(n) * obj.num_wturb;
        end
        
        %Returns the modified power output based on the time of day
        function out = tmod_pwr(obj, time)
            if(time >= 6 && time < 11)
                out = obj.pwr * obj.tmod(1);
                
            elseif(time >= 11 && time < 15)
                out = obj.pwr * obj.tmod(2);
                
            elseif(time >= 15 && time < 19)
                out = obj.pwr * obj.tmod(3);
                
            elseif(time >= 19 && time < 24)
                out = obj.pwr * obj.tmod(4);
                
            else
                out = obj.pwr * obj.tmod(5);
            end
        end
        
    end
end

