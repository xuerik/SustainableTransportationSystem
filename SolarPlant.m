classdef SolarPlant < handle
    % SolarPlants Class representation of an array of solar pannels
    % It takes solar data and area of the land as input arguments in its
    % constructor. Using that information, the number of
    % solar panels, SunPower E19/425 solar panels, and the total power
    % output can be calculated.
    
    properties
        pwr; % Power generated by the solar power plant for the given area and solar data
        num_spanel; % Number of solar panels
        solar; % Solar radiation
        total_area; % Area
       
    end
    
    properties(Constant)
        size = 2.16 % Size of the solar panels in square meter
        % Percentage of energy produced at certain time intervals
        tmod = [0.10, 0.48, 0.35, 0.06, 0.01];
    end
    
    methods
        % Constructor for SolarPlants, solar is the solar data in kilowatt
        % per square meter and area is the size of the land in square
        % meters
        function obj = SolarPlant(solar, a)
            obj.solar = solar;
            obj.num_spanel = floor(a / obj.size);
            obj.pwr = (obj.num_spanel * obj.size) * (0.20 * solar);
            obj.total_area = obj.num_spanel * obj.size;
        end
        
        % Store the total power generated into output
        function output = get_pwr(obj)
            output = obj.pwr;
        end
        
        % Store the number of solar panels into output
        function output = get_num_spanel(obj)
            output = obj.num_spanel;
        end
        
        % Change the number of solar panels given by the input argument
        function obj = set_spanel(obj,num)
            obj.num_spanel = num;
            obj.pwr = obj.num_spanel * 0.20 * obj.solar;
        end
        
        % Change the solar data given by the input argument
        function obj = set_solar(obj,solar)
            obj.solar = solar;
            obj.pwr = obj.num_spanel * 0.20 * obj.solar;
        end
        
        %Returns the modified power output based on the time of day
        function out = tmod_pwr(obj, time)
            if(time >= 6 && time < 11)
                out = obj.pwr * obj.tmod(1);
                
            elseif(time >= 11 && time < 15)
                out = obj.pwr * obj.tmod(2);
                
            elseif(time >= 15 && time < 19)
                out = obj.pwr * obj.tmod(3);
                
            elseif(time >= 19 && time < 24)
                out = obj.pwr * obj.tmod(4);
                
            else
                out = obj.pwr * obj.tmod(5);
            end
        end
    
    end
end

